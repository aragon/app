import type { IProposal } from '@/modules/governance/api/governanceService';
import type { IProposalCreate } from '@/modules/governance/dialogs/publishProposalDialog';
import type { IDao, IDaoPlugin } from '@/shared/api/daoService';
import { networkDefinitions } from '@/shared/constants/networkDefinitions';
import type { IPluginInfo } from '@/shared/types';
import { pluginRegistryUtils } from '@/shared/utils/pluginRegistryUtils';
import { transactionUtils, type ITransactionRequest } from '@/shared/utils/transactionUtils';
import { versionComparatorUtils } from '@/shared/utils/versionComparatorUtils';
import { invariant } from '@aragon/gov-ui-kit';
import { encodeFunctionData, type Hex } from 'viem';
import { SettingsSlotId } from '../../constants/moduleSlots';
import type { IBuildPreparePluginUpdateDataParams } from '../../types';
import { pluginSetupProcessorAbi } from './pluginSetupProcessorAbi';

class PrepareDaoContractsUpdateDialogUtils {
    buildPrepareUpdatePluginsTransaction = (dao: IDao, plugins: IDaoPlugin[]): Promise<ITransactionRequest> => {
        const pluginUpdateData = plugins.map((plugin) => this.buildPrepareUpdateTransaction(dao, plugin));
        const { pluginSetupProcessor } = networkDefinitions[dao.network].addresses;

        const transactionParams = { to: pluginSetupProcessor, value: BigInt(0) };
        const pluginUpdateTransactions = pluginUpdateData.map((data) => ({ ...transactionParams, data }));
        const transaction = transactionUtils.encodeTransactionRequests(pluginUpdateTransactions, dao.network);

        return Promise.resolve(transaction);
    };

    getApplyUpdateProposal = (dao: IDao, plugins: IDaoPlugin[], osxUpdate: boolean): IProposalCreate => {
        const actions = this.buildApplyUpdateTransactions();
        const metadata = this.buildApplyUpdateMetadata(dao, plugins, osxUpdate);

        return { ...metadata, actions, resources: [] };
    };

    private buildPrepareUpdateTransaction = (dao: IDao, plugin: IDaoPlugin) => {
        const pluginInfo = pluginRegistryUtils.getPlugin(plugin.subdomain) as IPluginInfo;

        const currentVersionTag = versionComparatorUtils.normaliseComparatorInput(plugin)!;
        const { installVersion: newVersionTag } = pluginInfo;
        const pluginSetupRepo = pluginInfo.repositoryAddresses[dao.network];
        const setupPayload = this.buildPluginSetupPayload(dao, plugin);

        const data = encodeFunctionData({
            abi: pluginSetupProcessorAbi,
            functionName: 'prepareUpdate',
            args: [dao.address as Hex, { currentVersionTag, newVersionTag, pluginSetupRepo, setupPayload }],
        });

        return data;
    };

    private buildPluginSetupPayload = (dao: IDao, plugin: IDaoPlugin) => {
        const { address, subdomain, preparedSetupData } = plugin;

        const currentHelpers = preparedSetupData.helpers as Hex[];
        const updateDataBuilder = pluginRegistryUtils.getSlotFunction<IBuildPreparePluginUpdateDataParams, Hex>({
            slotId: SettingsSlotId.SETTINGS_BUILD_PREPARE_PLUGIN_UPDATE_DATA,
            pluginId: subdomain,
        });

        invariant(updateDataBuilder != null, 'PrepareDaoContractsUpdateDialogUtils: builder function does not exist.');
        const initializeData = updateDataBuilder({ dao, plugin });

        return { plugin: address as Hex, currentHelpers, data: initializeData };
    };

    private buildApplyUpdateTransactions = (): ITransactionRequest[] => {
        return [{ data: '0x' as Hex, to: '0x01' as Hex, value: BigInt(0) }];
    };

    private buildApplyUpdateMetadata = (
        dao: IDao,
        plugins: IDaoPlugin[],
        osx?: boolean,
    ): Pick<IProposal, 'title' | 'summary' | 'description'> => {
        const summary = this.getApplyUpdateSummaryMetadata(dao);
        const description = this.getApplyUpdateDescriptionMetadata(dao, plugins, osx);

        return { title: 'Aragon OSx contract upgrade', summary, description };
    };

    private getApplyUpdateSummaryMetadata = (dao: IDao) =>
        `This proposal is an Aragon OSx Update for ${dao.name}. The title, summary, and description text are automatically generated by the Aragon App.`;

    private getApplyUpdateDescriptionMetadata = (dao: IDao, plugins: IDaoPlugin[], osx?: boolean): string => {
        const osxUpdate = osx ? this.getOsxUpdateDetails(dao) : '';
        const pluginsUpdate = plugins.map((plugin) => this.getPluginUpdateDetails(plugin)).join(' ');

        return `
            <p>
                This proposal contains on-chain transactions that would upgrade specific smart contract components as
                follows:
            </p>
            <ol>${osxUpdate}${pluginsUpdate}</ol>
            <p>
                It is essential to consider the implications of upgrades before voting. Read the above release notes and
                confirm that all of the addresses in the actions correspond with the proposed upgrade.
            </p>
        `;
    };

    private getOsxUpdateDetails = (dao: IDao) => {
        const { release, build, releaseNotes, description } = networkDefinitions[dao.network].protocolVersion;
        const updatedVersion = `${release.toString()}.${build.toString()}.0`;
        const { version: currentVersion } = dao;

        return `
            <li>
                <strong>Aragon OSx ${updatedVersion}</strong>
                <ol>
                    <li><strong>Current version</strong>: ${currentVersion}}</li>
                    <li><strong>Upgrade description</strong>: ${description}}</li>
                    <li><strong>Note</strong>: The DAO's address will never change</li>
                    <li><a href=${releaseNotes}} target="_blank" rel="noopener noreferrer">View Release Notes</a></li>
                </ol>
            </li>
        `;
    };

    private getPluginUpdateDetails = (plugin: IDaoPlugin) => {
        const { subdomain, release: currentRelease, build: currentBuild } = plugin;
        const { release, build } = (pluginRegistryUtils.getPlugin(subdomain) as IPluginInfo).installVersion;

        const updatedVersion = `${release.toString()}.${build.toString()}`;
        const currentVersion = `${currentRelease}.${currentBuild}`;

        return `
            <li>
                <strong>${updatedVersion}}</strong>
                <ol>
                    <li><strong>Current version</strong>: ${currentVersion}}</li>
                    <li><strong>Upgrade description</strong>: {{description}}</li>
                    <li><a href={{releaseNotesLink}} target="_blank" rel="noopener noreferrer">View Release Notes</a></li>
                </ol>
            </li>
        `;
    };
}

export const prepareDaoContractsUpdateDialogUtils = new PrepareDaoContractsUpdateDialogUtils();
